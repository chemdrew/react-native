'use strict';var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Components/ScrollView/__tests__/ScrollView-test.js";var Text=require('../../../Text/Text');var ReactNativeTestTools=require('../../../Utilities/ReactNativeTestTools');var View=require('../../View/View');var ScrollView=require('../ScrollView');var React=require('react');var ReactTestRenderer=require('react-test-renderer');describe('ScrollView',function(){beforeEach(function(){jest.resetModules();});it('renders its children',function(){ReactNativeTestTools.expectRendersMatchingSnapshot('ScrollView',function(){return(0,_jsxRuntime.jsx)(ScrollView,{children:(0,_jsxRuntime.jsx)(View,{children:(0,_jsxRuntime.jsx)(Text,{children:"Hello World!"})})});},function(){jest.dontMock('../ScrollView');});});it('mocks native methods and instance methods',function(){var _ref$current,_ref$current2;jest.mock('../ScrollView');var ref=React.createRef();ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{ref:ref}));expect((_ref$current=ref.current)==null?void 0:_ref$current.measure).toBeInstanceOf(jest.fn().constructor);expect((_ref$current2=ref.current)==null?void 0:_ref$current2.scrollTo).toBeInstanceOf(jest.fn().constructor);});describe('ref',function(){it('receives an instance or null',function(){jest.dontMock('../ScrollView');var scrollViewRef=jest.fn();var testRendererInstance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{ref:scrollViewRef}));expect(scrollViewRef).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));testRendererInstance.unmount();expect(scrollViewRef).toHaveBeenLastCalledWith(null);});it('transitions between refs',function(){jest.dontMock('../ScrollView');var scrollViewRefA=jest.fn();var testRendererInstance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{ref:scrollViewRefA}));expect(scrollViewRefA).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));var scrollViewRefB=jest.fn();testRendererInstance.update((0,_jsxRuntime.jsx)(ScrollView,{ref:scrollViewRefB}));expect(scrollViewRefA).toHaveBeenLastCalledWith(null);expect(scrollViewRefB).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));});});describe('innerViewRef',function(){it('receives an instance or null',function(){jest.dontMock('../ScrollView');var innerViewRef=jest.fn();var testRendererInstance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{innerViewRef:innerViewRef}));expect(innerViewRef).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));testRendererInstance.unmount();expect(innerViewRef).toHaveBeenLastCalledWith(null);});it('transitions between refs',function(){jest.dontMock('../ScrollView');var innerViewRefA=jest.fn();var testRendererInstance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{innerViewRef:innerViewRefA}));expect(innerViewRefA).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));var innerViewRefB=jest.fn();testRendererInstance.update((0,_jsxRuntime.jsx)(ScrollView,{innerViewRef:innerViewRefB}));expect(innerViewRefA).toHaveBeenLastCalledWith(null);expect(innerViewRefB).toHaveBeenLastCalledWith(expect.objectContaining({_nativeTag:expect.any(Number)}));});});describe('getInnerViewRef',function(){it('returns an instance',function(){jest.dontMock('../ScrollView');var scrollViewRef=React.createRef(null);ReactTestRenderer.create((0,_jsxRuntime.jsx)(ScrollView,{ref:scrollViewRef}));var innerViewRef=scrollViewRef.current.getInnerViewRef();expect(innerViewRef.measure).toBeInstanceOf(jest.fn().constructor);expect(innerViewRef.measureLayout).toBeInstanceOf(jest.fn().constructor);expect(innerViewRef.measureInWindow).toBeInstanceOf(jest.fn().constructor);});});});
var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _Button=_interopRequireDefault(require("../Button"));var React=_interopRequireWildcard(require("react"));var _reactTestRenderer=_interopRequireDefault(require("react-test-renderer"));var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Components/__tests__/Button-test.js";function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}describe('<Button />',function(){it('should render as expected',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button"}))).toMatchSnapshot();});it('should be disabled and it should set accessibilityState to disabled when disabled={true}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",disabled:true}))).toMatchSnapshot();});it('should be disabled when disabled={true} and accessibilityState={{disabled: true}}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",disabled:true,accessibilityState:{disabled:true}}))).toMatchSnapshot();});it('should be disabled when disabled is empty and accessibilityState={{disabled: true}}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",accessibilityState:{disabled:true}}))).toMatchSnapshot();});it('should overwrite accessibilityState with value of disabled prop',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",disabled:true,accessibilityState:{disabled:false}}))).toMatchSnapshot();});it('should not be disabled when disabled={false} and accessibilityState={{disabled: true}}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",disabled:false,accessibilityState:{disabled:true}}))).toMatchSnapshot();});it('should not be disabled when disabled={false} and accessibilityState={{disabled: false}}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",disabled:false,accessibilityState:{disabled:false}}))).toMatchSnapshot();});it('should be set importantForAccessibility={no-hide-descendants} when importantForAccessibility={no-hide-descendants}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",importantForAccessibility:'no-hide-descendants'}))).toMatchSnapshot();});it('should be set importantForAccessibility={no-hide-descendants} when importantForAccessibility={no}',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_Button.default,{title:"Test Button",importantForAccessibility:'no'}))).toMatchSnapshot();});});
'use strict';var RNCodegen;try{RNCodegen=require('../packages/react-native-codegen/lib/generators/RNCodegen.js');}catch(e){RNCodegen=require('@react-native/codegen/lib/generators/RNCodegen.js');if(!RNCodegen){throw'RNCodegen not found.';}}var fs=require('fs');var mkdirp=require('mkdirp');var yargs=require('yargs');var argv=yargs.option('p',{alias:'platform',describe:'Platform to generate native code artifacts for.'}).option('s',{alias:'schemaListPath',describe:'The path to the schema list file.'}).option('o',{alias:'outputDir',describe:'Path to directory where native code source files should be saved.'}).usage('Usage: $0 <args>').demandOption(['platform','schemaListPath','outputDir'],'Please provide platform, schema path, and output directory.').argv;var GENERATORS={android:[],ios:['providerIOS']};function generateProvider(platform,schemaListPath,outputDirectory){var schemaListText=fs.readFileSync(schemaListPath,'utf-8');if(schemaListText==null){throw new Error("Can't find schema list file at "+schemaListPath);}if(!outputDirectory){throw new Error('outputDir is required');}mkdirp.sync(outputDirectory);var schemaPaths;try{schemaPaths=JSON.parse(schemaListText);}catch(err){throw new Error("Can't parse schema to JSON. "+schemaListPath);}var schemas={};try{for(var libraryName of Object.keys(schemaPaths)){var tmpSchemaText=fs.readFileSync(schemaPaths[libraryName],'utf-8');schemas[libraryName]=JSON.parse(tmpSchemaText);}}catch(err){throw new Error("Failed to read schema file. "+err.message);}if(GENERATORS[platform]==null){throw new Error("Invalid platform type. "+platform);}RNCodegen.generateFromSchemas({schemas:schemas,outputDirectory:outputDirectory},{generators:GENERATORS[platform]});}function main(){generateProvider(argv.platform,argv.schemaListPath,argv.outputDir);}main();
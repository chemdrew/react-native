'use strict';describe('checkVersion',function(){describe('in development',function(){_setDevelopmentModeForTests(true);_defineCheckVersionTests();});describe('in production',function(){_setDevelopmentModeForTests(false);_defineCheckVersionTests();});});function _setDevelopmentModeForTests(dev){var originalDev;beforeAll(function(){originalDev=global.__DEV__;global.__DEV__=dev;});afterAll(function(){global.__DEV__=originalDev;});}function _defineCheckVersionTests(){var consoleError=console.error;var globalConsole=global.console;var spyOnConsoleError;var consoleOutput;beforeEach(function(){consoleOutput='';console.error=jest.fn();global.console={error:jest.fn(function(error){return consoleOutput+=error;})};spyOnConsoleError=jest.spyOn(global.console,'error');});afterEach(function(){jest.resetModules();console.error=consoleError;global.console=globalConsole;spyOnConsoleError.mockReset();});it('passes when all the versions are zero',function(){_mockJsVersion(0,0,0);_mockNativeVersion(0,0,0);var ReactNativeVersion=require('../ReactNativeVersion');var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');expect(ReactNativeVersion).toMatchObject({version:{major:0,minor:0,patch:0,prerelease:null}});expect(function(){return ReactNativeVersionCheck.checkVersions();}).not.toThrow();});it('passes when the minor matches when the major is zero',function(){_mockJsVersion(0,1,0);_mockNativeVersion(0,1,0);var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');expect(function(){return ReactNativeVersionCheck.checkVersions();}).not.toThrow();});it("logs error when the minor doesn't match when the major is zero",function(){_mockJsVersion(0,1,0);_mockNativeVersion(0,2,0);var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');ReactNativeVersionCheck.checkVersions();expect(spyOnConsoleError).toHaveBeenCalledTimes(1);expect(consoleOutput).toMatch(/React Native version mismatch/);});it("logs error when the major doesn't match",function(){_mockJsVersion(1,0,0);_mockNativeVersion(2,0,0);var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');ReactNativeVersionCheck.checkVersions();expect(spyOnConsoleError).toHaveBeenCalledTimes(1);expect(consoleOutput).toMatch(/React Native version mismatch/);});it("doesn't log error if the patch doesn't match",function(){_mockJsVersion(0,1,0);_mockNativeVersion(0,1,2);var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');ReactNativeVersionCheck.checkVersions();expect(spyOnConsoleError).toHaveBeenCalledTimes(0);});it("doesn't log error if the prerelease doesn't match",function(){_mockJsVersion(0,1,0,'beta.0');_mockNativeVersion(0,1,0,'alpha.1');var ReactNativeVersionCheck=require('../ReactNativeVersionCheck');ReactNativeVersionCheck.checkVersions();expect(spyOnConsoleError).toHaveBeenCalledTimes(0);});}function _mockJsVersion(){var major=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var minor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var patch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var prerelease=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;jest.doMock('../ReactNativeVersion',function(){return{version:{major:major,minor:minor,patch:patch,prerelease:prerelease}};});}function _mockNativeVersion(){var major=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var minor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var patch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var prerelease=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;jest.doMock('../../Utilities/NativePlatformConstantsAndroid',function(){return{getConstants:function getConstants(){return{reactNativeVersion:{major:major,minor:minor,patch:patch,prerelease:prerelease}};}};});jest.doMock('../../Utilities/NativePlatformConstantsIOS',function(){return{getConstants:function getConstants(){return{reactNativeVersion:{major:major,minor:minor,patch:patch,prerelease:prerelease}};}};});}
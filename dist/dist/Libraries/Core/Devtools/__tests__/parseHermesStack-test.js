'use strict';var parseHermesStack=require('../parseHermesStack');describe('parseHermesStack',function(){test('bytecode location',function(){expect(parseHermesStack(['TypeError: undefined is not a function','    at global (address at unknown:1:9)','    at foo$bar (address at /js/foo.hbc:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"global\",\n            \"location\": Object {\n              \"line1Based\": 1,\n              \"sourceUrl\": \"unknown\",\n              \"type\": \"BYTECODE\",\n              \"virtualOffset0Based\": 9,\n            },\n            \"type\": \"FRAME\",\n          },\n          Object {\n            \"functionName\": \"foo$bar\",\n            \"location\": Object {\n              \"line1Based\": 10,\n              \"sourceUrl\": \"/js/foo.hbc\",\n              \"type\": \"BYTECODE\",\n              \"virtualOffset0Based\": 1234,\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"TypeError: undefined is not a function\",\n      }\n    ");});test('internal bytecode location',function(){expect(parseHermesStack(['TypeError: undefined is not a function','    at internal (address at InternalBytecode.js:1:9)','    at notInternal (address at /js/InternalBytecode.js:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"internal\",\n            \"location\": Object {\n              \"line1Based\": 1,\n              \"sourceUrl\": \"InternalBytecode.js\",\n              \"type\": \"INTERNAL_BYTECODE\",\n              \"virtualOffset0Based\": 9,\n            },\n            \"type\": \"FRAME\",\n          },\n          Object {\n            \"functionName\": \"notInternal\",\n            \"location\": Object {\n              \"line1Based\": 10,\n              \"sourceUrl\": \"/js/InternalBytecode.js\",\n              \"type\": \"BYTECODE\",\n              \"virtualOffset0Based\": 1234,\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"TypeError: undefined is not a function\",\n      }\n    ");});test('source location',function(){expect(parseHermesStack(['TypeError: undefined is not a function','    at global (unknown:1:9)','    at foo$bar (/js/foo.js:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"global\",\n            \"location\": Object {\n              \"column1Based\": 9,\n              \"line1Based\": 1,\n              \"sourceUrl\": \"unknown\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n          Object {\n            \"functionName\": \"foo$bar\",\n            \"location\": Object {\n              \"column1Based\": 1234,\n              \"line1Based\": 10,\n              \"sourceUrl\": \"/js/foo.js\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"TypeError: undefined is not a function\",\n      }\n    ");});test('tolerate empty filename',function(){expect(parseHermesStack(['TypeError: undefined is not a function','    at global (unknown:1:9)','    at foo$bar (:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"global\",\n            \"location\": Object {\n              \"column1Based\": 9,\n              \"line1Based\": 1,\n              \"sourceUrl\": \"unknown\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n          Object {\n            \"functionName\": \"foo$bar\",\n            \"location\": Object {\n              \"column1Based\": 1234,\n              \"line1Based\": 10,\n              \"sourceUrl\": \"\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"TypeError: undefined is not a function\",\n      }\n    ");});test('skipped frames',function(){expect(parseHermesStack(['TypeError: undefined is not a function','    at global (unknown:1:9)','    ... skipping 50 frames','    at foo$bar (/js/foo.js:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"global\",\n            \"location\": Object {\n              \"column1Based\": 9,\n              \"line1Based\": 1,\n              \"sourceUrl\": \"unknown\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n          Object {\n            \"count\": 50,\n            \"type\": \"SKIPPED\",\n          },\n          Object {\n            \"functionName\": \"foo$bar\",\n            \"location\": Object {\n              \"column1Based\": 1234,\n              \"line1Based\": 10,\n              \"sourceUrl\": \"/js/foo.js\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"TypeError: undefined is not a function\",\n      }\n    ");});test('ignore frames that are part of message',function(){expect(parseHermesStack(['The next line is not a stack frame','    at bogus (filename:1:2)','    but the real stack trace follows below.','    at foo$bar (/js/foo.js:10:1234)'].join('\n'))).toMatchInlineSnapshot("\n      Object {\n        \"entries\": Array [\n          Object {\n            \"functionName\": \"foo$bar\",\n            \"location\": Object {\n              \"column1Based\": 1234,\n              \"line1Based\": 10,\n              \"sourceUrl\": \"/js/foo.js\",\n              \"type\": \"SOURCE\",\n            },\n            \"type\": \"FRAME\",\n          },\n        ],\n        \"message\": \"The next line is not a stack frame\n          at bogus (filename:1:2)\n          but the real stack trace follows below.\",\n      }\n    ");});});
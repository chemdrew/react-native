'use strict';var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));jest.mock('../LogBoxSymbolication',function(){return{__esModule:true,symbolicate:jest.fn(),deleteStack:jest.fn()};});function getLogBoxLog(){return new(require('../LogBoxLog').default)({level:'warn',isComponentError:false,message:{content:'...',substitutions:[]},stack:createStack(['A','B','C']),category:'Message category...',componentStack:[{content:'LogBoxLog',fileName:'LogBoxLog.js',location:{column:-1,row:1}}],codeFrame:{fileName:'/path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js',location:{row:199,column:0},content:'<code frame>'}});}function getLogBoxSymbolication(){return require('../LogBoxSymbolication');}var createStack=function createStack(methodNames){return methodNames.map(function(methodName){return{column:null,file:'file://path/to/file.js',lineNumber:1,methodName:methodName};});};var runMicrotasks=function(){var _ref=(0,_asyncToGenerator2.default)(function*(){});return function runMicrotasks(){return _ref.apply(this,arguments);};}();describe('LogBoxLog',function(){beforeEach(function(){jest.resetModules();getLogBoxSymbolication().symbolicate.mockImplementation(function(){var _ref2=(0,_asyncToGenerator2.default)(function*(stack){return{stack:createStack(stack.map(function(frame){return"S("+frame.methodName+")";})),codeFrame:null};});return function(_x){return _ref2.apply(this,arguments);};}());});it('creates a LogBoxLog object',function(){var log=getLogBoxLog();expect(log.level).toEqual('warn');expect(log.message).toEqual({content:'...',substitutions:[]});expect(log.stack).toEqual(createStack(['A','B','C']));expect(log.category).toEqual('Message category...');expect(log.componentStack).toEqual([{content:'LogBoxLog',fileName:'LogBoxLog.js',location:{column:-1,row:1}}]);expect(log.codeFrame).toEqual({fileName:'/path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js',location:{row:199,column:0},content:'<code frame>'});});it('increments LogBoxLog count',function(){var log=getLogBoxLog();expect(log.count).toEqual(1);log.incrementCount();expect(log.count).toEqual(2);});it('starts without a symbolicated stack',function(){var log=getLogBoxLog();expect(log.symbolicated).toEqual({error:null,stack:null,status:'NONE'});});it('updates when symbolication is in progress',function(){var log=getLogBoxLog();var callback=jest.fn();log.symbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalledTimes(1);expect(log.symbolicated).toEqual({error:null,stack:null,status:'PENDING'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();log.symbolicate(callback);expect(callback).not.toBeCalled();expect(getLogBoxSymbolication().symbolicate).not.toBeCalled();});it('updates when symbolication finishes',(0,_asyncToGenerator2.default)(function*(){var log=getLogBoxLog();var callback=jest.fn();log.symbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalled();yield runMicrotasks();expect(callback).toBeCalledTimes(2);expect(callback).toBeCalledWith('COMPLETE');expect(log.symbolicated).toEqual({error:null,stack:createStack(['S(A)','S(B)','S(C)']),status:'COMPLETE'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();log.symbolicate(callback);yield runMicrotasks();expect(callback).toBeCalledTimes(0);expect(getLogBoxSymbolication().symbolicate).not.toBeCalled();}));it('updates when symbolication fails',(0,_asyncToGenerator2.default)(function*(){var error=new Error('...');getLogBoxSymbolication().symbolicate.mockImplementation(function(){var _ref5=(0,_asyncToGenerator2.default)(function*(stack){throw error;});return function(_x2){return _ref5.apply(this,arguments);};}());var log=getLogBoxLog();var callback=jest.fn();log.symbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalled();yield runMicrotasks();expect(callback).toBeCalledTimes(2);expect(callback).toBeCalledWith('FAILED');expect(log.symbolicated).toEqual({error:error,stack:null,status:'FAILED'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();log.symbolicate(callback);yield runMicrotasks();expect(callback).toBeCalledTimes(0);expect(getLogBoxSymbolication().symbolicate).not.toBeCalled();}));it('retry updates when symbolication is in progress',function(){var log=getLogBoxLog();var callback=jest.fn();log.retrySymbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalledTimes(1);expect(log.symbolicated).toEqual({error:null,stack:null,status:'PENDING'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();log.symbolicate(callback);expect(callback).not.toBeCalled();expect(getLogBoxSymbolication().symbolicate).not.toBeCalled();});it('retry updates when symbolication finishes',(0,_asyncToGenerator2.default)(function*(){var log=getLogBoxLog();var callback=jest.fn();log.retrySymbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalled();yield runMicrotasks();expect(callback).toBeCalledTimes(2);expect(callback).toBeCalledWith('COMPLETE');expect(log.symbolicated).toEqual({error:null,stack:createStack(['S(A)','S(B)','S(C)']),status:'COMPLETE'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();log.retrySymbolicate(callback);jest.runAllTicks();expect(callback).toBeCalledTimes(0);expect(getLogBoxSymbolication().symbolicate).not.toBeCalled();}));it('retry updates when symbolication fails',(0,_asyncToGenerator2.default)(function*(){var error=new Error('...');getLogBoxSymbolication().symbolicate.mockImplementation(function(){var _ref8=(0,_asyncToGenerator2.default)(function*(stack){throw error;});return function(_x3){return _ref8.apply(this,arguments);};}());var log=getLogBoxLog();var callback=jest.fn();log.retrySymbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalled();yield runMicrotasks();expect(callback).toBeCalledTimes(2);expect(callback).toBeCalledWith('FAILED');expect(log.symbolicated).toEqual({error:error,stack:null,status:'FAILED'});callback.mockClear();getLogBoxSymbolication().symbolicate.mockClear();getLogBoxSymbolication().symbolicate.mockImplementation(function(){var _ref9=(0,_asyncToGenerator2.default)(function*(stack){return{stack:createStack(stack.map(function(frame){return"S("+frame.methodName+")";})),codeFrame:null};});return function(_x4){return _ref9.apply(this,arguments);};}());log.retrySymbolicate(callback);expect(callback).toBeCalledTimes(1);expect(callback).toBeCalledWith('PENDING');expect(getLogBoxSymbolication().symbolicate).toBeCalled();yield runMicrotasks();expect(callback).toBeCalledTimes(2);expect(callback).toBeCalledWith('COMPLETE');expect(log.symbolicated).toEqual({error:null,stack:createStack(['S(A)','S(B)','S(C)']),status:'COMPLETE'});}));});
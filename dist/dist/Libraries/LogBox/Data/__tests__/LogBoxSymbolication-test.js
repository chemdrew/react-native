'use strict';var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var LogBoxSymbolication=require('../LogBoxSymbolication');jest.mock('../../../Core/Devtools/symbolicateStackTrace');var symbolicateStackTrace=require('../../../Core/Devtools/symbolicateStackTrace');var createStack=function createStack(methodNames){return methodNames.map(function(methodName){return{column:null,file:'file://path/to/file.js',lineNumber:1,methodName:methodName};});};describe('LogBoxSymbolication',function(){beforeEach(function(){jest.resetModules();symbolicateStackTrace.mockImplementation(function(){var _ref=(0,_asyncToGenerator2.default)(function*(stack){return{stack:stack,codeFrame:null};});return function(_x){return _ref.apply(this,arguments);};}());});it('symbolicates different stacks',function(){LogBoxSymbolication.symbolicate(createStack(['A','B','C']));LogBoxSymbolication.symbolicate(createStack(['D','E','F']));expect(symbolicateStackTrace.mock.calls.length).toBe(2);});it('batch symbolicates equivalent stacks',function(){var stack=createStack(['A','B','C']);LogBoxSymbolication.symbolicate(stack);LogBoxSymbolication.symbolicate(stack);expect(symbolicateStackTrace.mock.calls.length).toBe(1);});});
'use strict';var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Modal/__tests__/Modal-test.js";var render=require('../../../jest/renderer');var View=require('../../Components/View/View');var Modal=require('../Modal');var React=require('react');describe('<Modal />',function(){it('should render as <Modal> when mocked',function(){var instance=render.create((0,_jsxRuntime.jsx)(Modal,{children:(0,_jsxRuntime.jsx)(View,{})}));expect(instance).toMatchSnapshot();});it('should not render its children when mocked with visible=false',function(){var instance=render.create((0,_jsxRuntime.jsx)(Modal,{visible:false,children:(0,_jsxRuntime.jsx)(View,{testID:"child"})}));expect(instance.root.findAllByProps({testID:'child'})).toHaveLength(0);});it('should shallow render as <Modal> when mocked',function(){var output=render.shallow((0,_jsxRuntime.jsx)(Modal,{children:(0,_jsxRuntime.jsx)(View,{})}));expect(output).toMatchSnapshot();});it('should shallow render as <Modal> when not mocked',function(){jest.dontMock('../Modal');var output=render.shallow((0,_jsxRuntime.jsx)(Modal,{children:(0,_jsxRuntime.jsx)(View,{})}));expect(output).toMatchSnapshot();});it('should render as <RCTModalHostView> when not mocked',function(){jest.dontMock('../Modal');var instance=render.create((0,_jsxRuntime.jsx)(Modal,{children:(0,_jsxRuntime.jsx)(View,{})}));expect(instance).toMatchSnapshot();});});
var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _View=_interopRequireDefault(require("../../Components/View/View"));var _useMergeRefs=_interopRequireDefault(require("../useMergeRefs"));var React=_interopRequireWildcard(require("react"));var _reactTestRenderer=require("react-test-renderer");var _jsxRuntime=require("react/jsx-runtime");var _jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Utilities/__tests__/useMergeRefs-test.js",_this=this;function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function TestView(_ref){var name=_ref.name,refs=_ref.refs;var mergeRef=_useMergeRefs.default.apply(void 0,(0,_toConsumableArray2.default)(refs));return(0,_jsxRuntime.jsx)(_View.default,{ref:mergeRef,testID:name});}var TestViewInstance=function(){function TestViewInstance(name){(0,_classCallCheck2.default)(this,TestViewInstance);this.name=name;}(0,_createClass2.default)(TestViewInstance,null,[{key:"fromValue",value:function fromValue(value){var _value$props;var testID=value==null?void 0:(_value$props=value.props)==null?void 0:_value$props.testID;return testID==null?null:new TestViewInstance(testID);}},{key:"named",value:function named(name){return expect.testViewInstance(name);}}]);return TestViewInstance;}();expect.extend({testViewInstance:function testViewInstance(received,name){var pass=received instanceof TestViewInstance&&received.name===name;return{pass:pass};}});function mockRefRegistry(){var registry=[];return{mockCallbackRef:function mockCallbackRef(name){return function(current){registry.push((0,_defineProperty2.default)({},name,TestViewInstance.fromValue(current)));};},mockObjectRef:function mockObjectRef(name){return{set current(current){registry.push((0,_defineProperty2.default)({},name,TestViewInstance.fromValue(current)));}};},registry:registry};}test('accepts a callback ref',function(){var root;var _mockRefRegistry=mockRefRegistry(),mockCallbackRef=_mockRefRegistry.mockCallbackRef,registry=_mockRefRegistry.registry;var refA=mockCallbackRef('refA');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"foo",refs:[refA]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')}]);(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"bar",refs:[refA]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refA:TestViewInstance.named('bar')}]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refA:TestViewInstance.named('bar')},{refA:null}]);});test('accepts an object ref',function(){var root;var _mockRefRegistry2=mockRefRegistry(),mockObjectRef=_mockRefRegistry2.mockObjectRef,registry=_mockRefRegistry2.registry;var refA=mockObjectRef('refA');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"foo",refs:[refA]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')}]);(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"bar",refs:[refA]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refA:TestViewInstance.named('bar')}]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refA:TestViewInstance.named('bar')},{refA:null}]);});test('invokes refs in order',function(){var root;var _mockRefRegistry3=mockRefRegistry(),mockCallbackRef=_mockRefRegistry3.mockCallbackRef,mockObjectRef=_mockRefRegistry3.mockObjectRef,registry=_mockRefRegistry3.registry;var refA=mockCallbackRef('refA');var refB=mockObjectRef('refB');var refC=mockCallbackRef('refC');var refD=mockObjectRef('refD');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"foo",refs:[refA,refB,refC,refD]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')},{refC:TestViewInstance.named('foo')},{refD:TestViewInstance.named('foo')}]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')},{refC:TestViewInstance.named('foo')},{refD:TestViewInstance.named('foo')},{refA:null},{refB:null},{refC:null},{refD:null}]);});test('invokes all refs if any ref changes',function(){var root;var _mockRefRegistry4=mockRefRegistry(),mockCallbackRef=_mockRefRegistry4.mockCallbackRef,registry=_mockRefRegistry4.registry;var refA=mockCallbackRef('refA');var refB=mockCallbackRef('refB');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{name:"foo",refs:[refA,refB]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')}]);var refAPrime=mockCallbackRef('refAPrime');(0,_reactTestRenderer.act)(function(){root.update((0,_jsxRuntime.jsx)(TestView,{name:"foo",refs:[refAPrime,refB]}));});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')},{refA:null},{refB:null},{refAPrime:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')}]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([{refA:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')},{refA:null},{refB:null},{refAPrime:TestViewInstance.named('foo')},{refB:TestViewInstance.named('foo')},{refAPrime:null},{refB:null}]);});
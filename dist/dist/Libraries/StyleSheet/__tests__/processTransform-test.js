'use strict';var processTransform=require('../processTransform');describe('processTransform',function(){describe('validation',function(){it('should accept an empty array',function(){processTransform([]);});it('should accept an empty string',function(){processTransform('');});it('should accept a simple valid transform',function(){processTransform([{scale:0.5},{translateX:10},{translateY:20},{rotate:'10deg'}]);processTransform('scale(0.5) translateX(10px) translateY(20px) rotate(10deg)');});it('should throw on object with multiple properties',function(){expect(function(){return processTransform([{scale:0.5,translateY:10}]);}).toThrowErrorMatchingSnapshot();});it('should throw on invalid transform property',function(){expect(function(){return processTransform([{translateW:10}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform('translateW(10)');}).toThrowErrorMatchingSnapshot();});it('should throw when not passing an array to an array prop',function(){expect(function(){return processTransform([{matrix:'not-a-matrix'}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform([{translate:10}]);}).toThrowErrorMatchingSnapshot();});it('should accept a valid matrix',function(){processTransform([{matrix:[1,1,1,1,1,1,1,1,1]}]);processTransform('matrix(1, 1, 1, 1, 1, 1, 1, 1, 1)');processTransform([{matrix:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}]);processTransform('matrix(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)');});it('should throw when passing a matrix of the wrong size',function(){expect(function(){return processTransform([{matrix:[1,1,1,1]}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform('matrix(1, 1, 1, 1)');}).toThrowErrorMatchingSnapshot();});it('should accept a valid translate',function(){processTransform([{translate:[1,1]}]);processTransform('translate(1px)');processTransform('translate(1px, 1px)');processTransform([{translate:[1,1,1]}]);});it('should throw when passing a translate of the wrong size',function(){expect(function(){return processTransform([{translate:[1]}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform([{translate:[1,1,1,1]}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform('translate(1px, 1px, 1px, 1px)');}).toThrowErrorMatchingSnapshot();});it('should throw when passing an invalid value to a number prop',function(){expect(function(){return processTransform([{translateY:'20deg'}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform([{scale:{x:10,y:10}}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform([{perspective:[]}]);}).toThrowErrorMatchingSnapshot();});it('should throw when passing a perspective of 0',function(){expect(function(){return processTransform([{perspective:0}]);}).toThrowErrorMatchingSnapshot();});it('should accept an angle in degrees or radians',function(){processTransform([{skewY:'10deg'}]);processTransform('skewY(10deg)');processTransform([{rotateX:'1.16rad'}]);processTransform('rotateX(1.16rad)');});it('should throw when passing an invalid angle prop',function(){expect(function(){return processTransform([{rotate:10}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform('rotate(10)');}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform([{skewX:'10drg'}]);}).toThrowErrorMatchingSnapshot();expect(function(){return processTransform('skewX(10drg)');}).toThrowErrorMatchingSnapshot();});it('should throw when passing an Animated.Value',function(){expect(function(){return processTransform([{rotate:{getValue:function getValue(){}}}]);}).toThrowErrorMatchingSnapshot();});});});
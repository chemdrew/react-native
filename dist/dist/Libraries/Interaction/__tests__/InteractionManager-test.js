'use strict';var BatchedBridge=require('../../BatchedBridge/BatchedBridge');jest.mock('../../vendor/core/ErrorUtils');jest.mock('../../BatchedBridge/BatchedBridge');var isWindows=process.platform==='win32';var itif=function itif(condition){return condition?it:it.skip;};function expectToBeCalledOnce(fn){expect(fn.mock.calls.length).toBe(1);}describe('InteractionManager',function(){var InteractionManager;var interactionStart;var interactionComplete;beforeEach(function(){jest.resetModules();InteractionManager=require('../InteractionManager');interactionStart=jest.fn();interactionComplete=jest.fn();InteractionManager.addListener(InteractionManager.Events.interactionStart,interactionStart);InteractionManager.addListener(InteractionManager.Events.interactionComplete,interactionComplete);});it('throws when clearing an undefined handle',function(){expect(function(){return InteractionManager.clearInteractionHandle();}).toThrow();});it('notifies asynchronously when interaction starts',function(){InteractionManager.createInteractionHandle();expect(interactionStart).not.toBeCalled();jest.runAllTimers();expect(interactionStart).toBeCalled();expect(interactionComplete).not.toBeCalled();});it('notifies asynchronously when interaction stops',function(){var handle=InteractionManager.createInteractionHandle();jest.runAllTimers();interactionStart.mockClear();InteractionManager.clearInteractionHandle(handle);expect(interactionComplete).not.toBeCalled();jest.runAllTimers();expect(interactionStart).not.toBeCalled();expect(interactionComplete).toBeCalled();});it('does not notify when started & stopped in same event loop',function(){var handle=InteractionManager.createInteractionHandle();InteractionManager.clearInteractionHandle(handle);jest.runAllTimers();expect(interactionStart).not.toBeCalled();expect(interactionComplete).not.toBeCalled();});it('does not notify when going from two -> one active interactions',function(){InteractionManager.createInteractionHandle();var handle=InteractionManager.createInteractionHandle();jest.runAllTimers();interactionStart.mockClear();interactionComplete.mockClear();InteractionManager.clearInteractionHandle(handle);jest.runAllTimers();expect(interactionStart).not.toBeCalled();expect(interactionComplete).not.toBeCalled();});it('runs tasks asynchronously when there are interactions',function(){var task=jest.fn();InteractionManager.runAfterInteractions(task);expect(task).not.toBeCalled();jest.runAllTimers();expect(task).toBeCalled();});it('runs tasks when interactions complete',function(){var task=jest.fn();var handle=InteractionManager.createInteractionHandle();InteractionManager.runAfterInteractions(task);jest.runAllTimers();InteractionManager.clearInteractionHandle(handle);expect(task).not.toBeCalled();jest.runAllTimers();expect(task).toBeCalled();});it('does not run tasks twice',function(){var task1=jest.fn();var task2=jest.fn();InteractionManager.runAfterInteractions(task1);jest.runAllTimers();InteractionManager.runAfterInteractions(task2);jest.runAllTimers();expectToBeCalledOnce(task1);});it('runs tasks added while processing previous tasks',function(){var task1=jest.fn(function(){InteractionManager.runAfterInteractions(task2);});var task2=jest.fn();InteractionManager.runAfterInteractions(task1);expect(task2).not.toBeCalled();jest.runAllTimers();expect(task1).toBeCalled();expect(task2).toBeCalled();});it('allows tasks to be cancelled',function(){var task1=jest.fn();var task2=jest.fn();var promise1=InteractionManager.runAfterInteractions(task1);InteractionManager.runAfterInteractions(task2);expect(task1).not.toBeCalled();expect(task2).not.toBeCalled();promise1.cancel();jest.runAllTimers();expect(task1).not.toBeCalled();expect(task2).toBeCalled();});});describe('promise tasks',function(){var InteractionManager;var sequenceId;function createSequenceTask(expectedSequenceId){return jest.fn(function(){expect(++sequenceId).toBe(expectedSequenceId);});}beforeEach(function(){jest.resetModules();jest.useFakeTimers({legacyFakeTimers:true});InteractionManager=require('../InteractionManager');sequenceId=0;});it('should run a basic promise task',function(){var task1=jest.fn(function(){expect(++sequenceId).toBe(1);return new Promise(function(resolve){return resolve();});});InteractionManager.runAfterInteractions({gen:task1,name:'gen1'});jest.runAllTimers();expectToBeCalledOnce(task1);});it('should handle nested promises',function(){var task1=jest.fn(function(){expect(++sequenceId).toBe(1);return new Promise(function(resolve){InteractionManager.runAfterInteractions({gen:task2,name:'gen2'}).then(resolve);});});var task2=jest.fn(function(){expect(++sequenceId).toBe(2);return new Promise(function(resolve){return resolve();});});InteractionManager.runAfterInteractions({gen:task1,name:'gen1'});jest.runAllTimers();expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);});it('should pause promise tasks during interactions then resume',function(){var task1=createSequenceTask(1);var task2=jest.fn(function(){expect(++sequenceId).toBe(2);return new Promise(function(resolve){setTimeout(function(){InteractionManager.runAfterInteractions(task3).then(resolve);},1);});});var task3=createSequenceTask(3);InteractionManager.runAfterInteractions(task1);InteractionManager.runAfterInteractions({gen:task2,name:'gen2'});jest.runOnlyPendingTimers();expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);var handle=InteractionManager.createInteractionHandle();jest.runAllTimers();jest.runAllTimers();expect(task3).not.toBeCalled();InteractionManager.clearInteractionHandle(handle);jest.runAllTimers();expectToBeCalledOnce(task3);});it('should execute tasks in loop within deadline',function(){InteractionManager.setDeadline(100);BatchedBridge.getEventLoopRunningTime.mockReturnValue(10);var task1=createSequenceTask(1);var task2=createSequenceTask(2);InteractionManager.runAfterInteractions(task1);InteractionManager.runAfterInteractions(task2);jest.runOnlyPendingTimers();expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);});it('should execute tasks one at a time if deadline exceeded',function(){InteractionManager.setDeadline(100);BatchedBridge.getEventLoopRunningTime.mockReturnValue(200);var task1=createSequenceTask(1);var task2=createSequenceTask(2);InteractionManager.runAfterInteractions(task1);InteractionManager.runAfterInteractions(task2);jest.runOnlyPendingTimers();expectToBeCalledOnce(task1);expect(task2).not.toBeCalled();jest.runOnlyPendingTimers();jest.runOnlyPendingTimers();expectToBeCalledOnce(task2);});var bigAsyncTest=function bigAsyncTest(resolveTest){jest.useRealTimers();var task1=createSequenceTask(1);var task2=jest.fn(function(){expect(++sequenceId).toBe(2);return new Promise(function(resolve){InteractionManager.runAfterInteractions(task3);setTimeout(function(){InteractionManager.runAfterInteractions({gen:task4,name:'gen4'}).then(resolve);},1);});});var task3=createSequenceTask(3);var task4=jest.fn(function(){expect(++sequenceId).toBe(4);return new Promise(function(resolve){InteractionManager.runAfterInteractions(task5).then(resolve);});});var task5=createSequenceTask(5);var task6=createSequenceTask(6);InteractionManager.runAfterInteractions(task1);InteractionManager.runAfterInteractions({gen:task2,name:'gen2'});InteractionManager.runAfterInteractions(task6);setTimeout(function(){expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);expectToBeCalledOnce(task3);expectToBeCalledOnce(task4);expectToBeCalledOnce(task5);expectToBeCalledOnce(task6);resolveTest();},100);};itif(!isWindows)('resolves async tasks recursively before other queued tasks',function(){return new Promise(bigAsyncTest);});itif(!isWindows)('should also work with a deadline',function(){InteractionManager.setDeadline(100);BatchedBridge.getEventLoopRunningTime.mockReturnValue(200);return new Promise(bigAsyncTest);});});
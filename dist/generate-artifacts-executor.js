'use strict';var _require=require('child_process'),execSync=_require.execSync;var fs=require('fs');var os=require('os');var path=require('path');var RN_ROOT=path.join(__dirname,'../..');var CODEGEN_DEPENDENCY_NAME='@react-native/codegen';var CODEGEN_REPO_PATH=RN_ROOT+"/packages/react-native-codegen";var CODEGEN_NPM_PATH=RN_ROOT+"/../"+CODEGEN_DEPENDENCY_NAME;var CORE_LIBRARIES=new Set(['rncore','FBReactNativeSpec']);var REACT_NATIVE_DEPENDENCY_NAME='react-native';function isReactNativeCoreLibrary(libraryName){return CORE_LIBRARIES.has(libraryName);}function executeNodeScript(node,script){execSync(node+" "+script);}function isAppRootValid(appRootDir){if(appRootDir==null){console.error('Missing path to React Native application');process.exitCode=1;return false;}return true;}function readPackageJSON(appRootDir){return JSON.parse(fs.readFileSync(path.join(appRootDir,'package.json')));}function printDeprecationWarningIfNeeded(dependency){if(dependency===REACT_NATIVE_DEPENDENCY_NAME){return;}console.log("[Codegen] CodegenConfig Deprecated Setup for "+dependency+".\n    The configuration file still contains the codegen in the libraries array.\n    If possible, replace it with a single object.\n  ");console.debug("BEFORE:\n    {\n      // ...\n      \"codegenConfig\": {\n        \"libraries\": [\n          {\n            \"name\": \"libName1\",\n            \"type\": \"all|components|modules\",\n            \"jsSrcsRoot\": \"libName1/js\"\n          },\n          {\n            \"name\": \"libName2\",\n            \"type\": \"all|components|modules\",\n            \"jsSrcsRoot\": \"libName2/src\"\n          }\n        ]\n      }\n    }\n\n    AFTER:\n    {\n      \"codegenConfig\": {\n        \"name\": \"libraries\",\n        \"type\": \"all\",\n        \"jsSrcsRoot\": \".\"\n      }\n    }\n  ");}function extractLibrariesFromConfigurationArray(configFile,codegenConfigKey,libraries,dependency,dependencyPath){console.log("[Codegen] Found "+dependency);configFile[codegenConfigKey].libraries.forEach(function(config){var libraryConfig={library:dependency,config:config,libraryPath:dependencyPath};libraries.push(libraryConfig);});}function extractLibrariesFromJSON(configFile,libraries,codegenConfigKey,dependency,dependencyPath){var isBlocking=false;if(dependency==null){dependency=REACT_NATIVE_DEPENDENCY_NAME;dependencyPath=RN_ROOT;isBlocking=true;}if(configFile[codegenConfigKey]==null){if(isBlocking){throw"[Codegen] Error: Could not find codegen config for "+dependency+" .";}return;}if(configFile[codegenConfigKey].libraries==null){console.log("[Codegen] Found "+dependency);var config=configFile[codegenConfigKey];libraries.push({library:dependency,config:config,libraryPath:dependencyPath});}else{printDeprecationWarningIfNeeded(dependency);extractLibrariesFromConfigurationArray(configFile,codegenConfigKey,libraries,dependency,dependencyPath);}}function handleReactNativeCodeLibraries(libraries,codegenConfigFilename,codegenConfigKey){console.log('[Codegen] Processing react-native core libraries');var reactNativePkgJson=path.join(RN_ROOT,codegenConfigFilename);if(!fs.existsSync(reactNativePkgJson)){throw'[Codegen] Error: Could not find config file for react-native.';}var reactNativeConfigFile=JSON.parse(fs.readFileSync(reactNativePkgJson));extractLibrariesFromJSON(reactNativeConfigFile,libraries,codegenConfigKey);}function handleThirdPartyLibraries(libraries,baseCodegenConfigFileDir,dependencies,codegenConfigFilename,codegenConfigKey){var configDir=baseCodegenConfigFileDir||path.join(RN_ROOT,'..');console.log("\n\n[Codegen] >>>>> Searching for codegen-enabled libraries in "+configDir);Object.keys(dependencies).forEach(function(dependency){if(dependency===REACT_NATIVE_DEPENDENCY_NAME){return;}var codegenConfigFileDir=path.join(configDir,dependency);var configFilePath=path.join(codegenConfigFileDir,codegenConfigFilename);if(fs.existsSync(configFilePath)){var configFile=JSON.parse(fs.readFileSync(configFilePath));extractLibrariesFromJSON(configFile,libraries,codegenConfigKey,dependency,codegenConfigFileDir);}});}function handleLibrariesFromReactNativeConfig(libraries,codegenConfigKey,codegenConfigFilename,appRootDir){var rnConfigFileName='react-native.config.js';console.log("\n\n[Codegen] >>>>> Searching for codegen-enabled libraries in "+rnConfigFileName);var rnConfigFilePath=path.resolve(appRootDir,rnConfigFileName);if(fs.existsSync(rnConfigFilePath)){var rnConfig=require(rnConfigFilePath);if(rnConfig.dependencies!=null){Object.keys(rnConfig.dependencies).forEach(function(name){var dependencyConfig=rnConfig.dependencies[name];if(dependencyConfig.root){var codegenConfigFileDir=path.resolve(appRootDir,dependencyConfig.root);var configFilePath=path.join(codegenConfigFileDir,codegenConfigFilename);var pkgJsonPath=path.join(codegenConfigFileDir,'package.json');if(fs.existsSync(configFilePath)){var pkgJson=JSON.parse(fs.readFileSync(pkgJsonPath));var configFile=JSON.parse(fs.readFileSync(configFilePath));extractLibrariesFromJSON(configFile,libraries,codegenConfigKey,pkgJson.name,codegenConfigFileDir);}}});}}}function handleInAppLibraries(libraries,pkgJson,codegenConfigKey,appRootDir){console.log('\n\n[Codegen] >>>>> Searching for codegen-enabled libraries in the app');extractLibrariesFromJSON(pkgJson,libraries,codegenConfigKey,pkgJson.name,appRootDir);}function getCodeGenCliPath(){var codegenCliPath;if(fs.existsSync(CODEGEN_REPO_PATH)){codegenCliPath=CODEGEN_REPO_PATH;if(!fs.existsSync(path.join(CODEGEN_REPO_PATH,'lib'))){console.log('\n\n[Codegen] >>>>> Building react-native-codegen package');execSync('yarn install',{cwd:codegenCliPath,stdio:'inherit'});execSync('yarn build',{cwd:codegenCliPath,stdio:'inherit'});}}else if(fs.existsSync(CODEGEN_NPM_PATH)){codegenCliPath=CODEGEN_NPM_PATH;}else{throw"error: Could not determine "+CODEGEN_DEPENDENCY_NAME+" location. Try running 'yarn install' or 'npm install' in your project root.";}return codegenCliPath;}function computeIOSOutputDir(outputPath,appRootDir){return path.join(outputPath?outputPath:appRootDir,'build/generated/ios');}function generateSchema(tmpDir,library,node,codegenCliPath){var pathToSchema=path.join(tmpDir,'schema.json');var pathToJavaScriptSources=path.join(library.libraryPath,library.config.jsSrcsDir);console.log("\n\n[Codegen] >>>>> Processing "+library.config.name);executeNodeScript(node,path.join(codegenCliPath,'lib','cli','combine','combine-js-to-schema-cli.js')+" --platform ios "+pathToSchema+" "+pathToJavaScriptSources);console.log("[Codegen] Generated schema: "+pathToSchema);return pathToSchema;}function generateCode(iosOutputDir,library,tmpDir,node,pathToSchema){var libraryTypeArg=library.config.type?"--libraryType "+library.config.type:'';var tmpOutputDir=path.join(tmpDir,'out');fs.mkdirSync(tmpOutputDir,{recursive:true});executeNodeScript(node,path.join(RN_ROOT,'scripts','generate-specs-cli.js')+"         --platform ios         --schemaPath "+pathToSchema+"         --outputDir "+tmpOutputDir+"         --libraryName "+library.config.name+"         "+libraryTypeArg);fs.mkdirSync(iosOutputDir,{recursive:true});execSync("cp -R "+tmpOutputDir+"/* "+iosOutputDir);console.log("[Codegen] Generated artifacts: "+iosOutputDir);}function generateNativeCodegenFiles(libraries,fabricEnabled,iosOutputDir,node,codegenCliPath,schemaPaths){var fabricEnabledTypes=['components','all'];libraries.forEach(function(library){if(!fabricEnabled&&fabricEnabledTypes.indexOf(library.config.type)>=0){console.log("[Codegen] "+library.config.name+" skipped because fabric is not enabled.");return;}var tmpDir=fs.mkdtempSync(path.join(os.tmpdir(),library.config.name));var pathToSchema=generateSchema(tmpDir,library,node,codegenCliPath);generateCode(iosOutputDir,library,tmpDir,node,pathToSchema);if(!isReactNativeCoreLibrary(library.config.name)){schemaPaths[library.config.name]=pathToSchema;}});}function createComponentProvider(fabricEnabled,schemaPaths,node,iosOutputDir){if(fabricEnabled){console.log('\n\n>>>>> Creating component provider');var schemaListTmpPath=os.tmpdir()+"/rn-tmp-schema-list.json";var fd=fs.openSync(schemaListTmpPath,'w');fs.writeSync(fd,JSON.stringify(schemaPaths));fs.closeSync(fd);console.log("Generated schema list: "+schemaListTmpPath);executeNodeScript(node,path.join(RN_ROOT,'scripts','generate-provider-cli.js')+" --platform ios --schemaListPath \""+schemaListTmpPath+"\" --outputDir "+iosOutputDir);console.log("Generated provider in: "+iosOutputDir);}}function findCodegenEnabledLibraries(appRootDir,baseCodegenConfigFileDir,codegenConfigFilename,codegenConfigKey){var pkgJson=readPackageJSON(appRootDir);var dependencies=Object.assign({},pkgJson.dependencies,pkgJson.devDependencies);var libraries=[];handleReactNativeCodeLibraries(libraries,codegenConfigFilename,codegenConfigKey);handleThirdPartyLibraries(libraries,baseCodegenConfigFileDir,dependencies,codegenConfigFilename,codegenConfigKey);handleLibrariesFromReactNativeConfig(libraries,codegenConfigKey,codegenConfigFilename,appRootDir);handleInAppLibraries(libraries,pkgJson,codegenConfigKey,appRootDir);return libraries;}function cleanupEmptyFilesAndFolders(filepath){var stats=fs.statSync(filepath);if(stats.isFile()&&stats.size===0){fs.rmSync(filepath);return;}else if(stats.isFile()){return;}var dirContent=fs.readdirSync(filepath);dirContent.forEach(function(contentPath){return cleanupEmptyFilesAndFolders(path.join(filepath,contentPath));});var newContent=fs.readdirSync(filepath);if(newContent.length===0){fs.rmdirSync(filepath);return;}}function execute(appRootDir,outputPath,node,codegenConfigFilename,codegenConfigKey,baseCodegenConfigFileDir,fabricEnabled){if(!isAppRootValid(appRootDir)){return;}try{var libraries=findCodegenEnabledLibraries(appRootDir,baseCodegenConfigFileDir,codegenConfigFilename,codegenConfigKey);if(libraries.length===0){console.log('[Codegen] No codegen-enabled libraries found.');return;}var codegenCliPath=getCodeGenCliPath();var schemaPaths={};var iosOutputDir=computeIOSOutputDir(outputPath,appRootDir);generateNativeCodegenFiles(libraries,fabricEnabled,iosOutputDir,node,codegenCliPath,schemaPaths);createComponentProvider(fabricEnabled,schemaPaths,node,iosOutputDir);cleanupEmptyFilesAndFolders(iosOutputDir);}catch(err){console.error(err);process.exitCode=1;}console.log('\n\n[Codegen] Done.');return;}module.exports={execute:execute,_extractLibrariesFromJSON:extractLibrariesFromJSON,_findCodegenEnabledLibraries:findCodegenEnabledLibraries,_executeNodeScript:executeNodeScript,_generateCode:generateCode,_cleanupEmptyFilesAndFolders:cleanupEmptyFilesAndFolders};
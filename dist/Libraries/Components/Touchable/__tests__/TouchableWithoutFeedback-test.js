'use strict';var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _Text=_interopRequireDefault(require("../../../Text/Text"));var _View=_interopRequireDefault(require("../../View/View"));var _TouchableWithoutFeedback=_interopRequireDefault(require("../TouchableWithoutFeedback"));var React=_interopRequireWildcard(require("react"));var _reactTestRenderer=_interopRequireDefault(require("react-test-renderer"));var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Components/Touchable/__tests__/TouchableWithoutFeedback-test.js";function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}describe('TouchableWithoutFeedback',function(){it('renders correctly',function(){var instance=_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{style:{},children:(0,_jsxRuntime.jsx)(_Text.default,{children:"Touchable"})}));expect(instance.toJSON()).toMatchSnapshot();});it('has displayName',function(){expect(_TouchableWithoutFeedback.default.displayName).toEqual('TouchableWithoutFeedback');});});describe('TouchableWithoutFeedback with disabled state',function(){it('should be disabled when disabled is true',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{disabled:true,children:(0,_jsxRuntime.jsx)(_View.default,{})}))).toMatchSnapshot();});it('should be disabled when disabled is true and accessibilityState is empty',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{disabled:true,accessibilityState:{},children:(0,_jsxRuntime.jsx)(_View.default,{})}))).toMatchSnapshot();});it('should keep accessibilityState when disabled is true',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{disabled:true,accessibilityState:{checked:true},children:(0,_jsxRuntime.jsx)(_View.default,{})}))).toMatchSnapshot();});it('should overwrite accessibilityState with value of disabled prop',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{disabled:true,accessibilityState:{disabled:false},children:(0,_jsxRuntime.jsx)(_View.default,{})}))).toMatchSnapshot();});it('should disable button when accessibilityState is disabled',function(){expect(_reactTestRenderer.default.create((0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{accessibilityState:{disabled:true},children:(0,_jsxRuntime.jsx)(_View.default,{})}))).toMatchSnapshot();});});
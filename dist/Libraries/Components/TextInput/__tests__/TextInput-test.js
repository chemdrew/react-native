var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Components/TextInput/__tests__/TextInput-test.js";var ReactNative=require('../../../ReactNative/RendererProxy');var _require=require('../../../Utilities/ReactNativeTestTools'),enter=_require.enter,expectRendersMatchingSnapshot=_require.expectRendersMatchingSnapshot;var TextInput=require('../TextInput');var React=require('react');var ReactTestRenderer=require('react-test-renderer');jest.unmock('../TextInput');describe('TextInput tests',function(){var input;var inputRef;var onChangeListener;var onChangeTextListener;var initialValue='initialValue';beforeEach(function(){inputRef=React.createRef(null);onChangeListener=jest.fn();onChangeTextListener=jest.fn();function TextInputWrapper(){var _React$useState=React.useState({text:initialValue}),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),state=_React$useState2[0],setState=_React$useState2[1];return(0,_jsxRuntime.jsx)(TextInput,{ref:inputRef,value:state.text,onChangeText:function onChangeText(text){onChangeTextListener(text);setState({text:text});},onChange:function onChange(event){onChangeListener(event);}});}var renderTree=ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInputWrapper,{}));input=renderTree.root.findByType(TextInput);});it('has expected instance functions',function(){expect(inputRef.current.isFocused).toBeInstanceOf(Function);expect(inputRef.current.clear).toBeInstanceOf(Function);expect(inputRef.current.focus).toBeInstanceOf(jest.fn().constructor);expect(inputRef.current.blur).toBeInstanceOf(jest.fn().constructor);expect(inputRef.current.setNativeProps).toBeInstanceOf(jest.fn().constructor);expect(inputRef.current.measure).toBeInstanceOf(jest.fn().constructor);expect(inputRef.current.measureInWindow).toBeInstanceOf(jest.fn().constructor);expect(inputRef.current.measureLayout).toBeInstanceOf(jest.fn().constructor);});it('calls onChange callbacks',function(){expect(input.props.value).toBe(initialValue);var message='This is a test message';ReactTestRenderer.act(function(){enter(input,message);});expect(input.props.value).toBe(message);expect(onChangeTextListener).toHaveBeenCalledWith(message);expect(onChangeListener).toHaveBeenCalledWith({nativeEvent:{text:message}});});function createTextInput(extraProps){var textInputRef=React.createRef(null);ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInput,Object.assign({ref:textInputRef,value:"value1"},extraProps)));return textInputRef;}it('focus() should not do anything if the TextInput is not editable',function(){var textInputRef=createTextInput({editable:false});textInputRef.current.currentProps=textInputRef.current.props;expect(textInputRef.current.isFocused()).toBe(false);TextInput.State.focusTextInput(textInputRef.current);expect(textInputRef.current.isFocused()).toBe(false);});it('should have support for being focused and blurred',function(){var textInputRef=createTextInput();expect(textInputRef.current.isFocused()).toBe(false);ReactNative.findNodeHandle=jest.fn().mockImplementation(function(ref){if(ref==null){return null;}if(ref===textInputRef.current||ref===textInputRef.current.getNativeRef()){return 1;}return 2;});TextInput.State.focusTextInput(textInputRef.current);expect(textInputRef.current.isFocused()).toBe(true);expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRef.current);TextInput.State.blurTextInput(textInputRef.current);expect(textInputRef.current.isFocused()).toBe(false);expect(TextInput.State.currentlyFocusedInput()).toBe(null);});it('should unfocus when other TextInput is focused',function(){var textInputRe1=React.createRef(null);var textInputRe2=React.createRef(null);ReactTestRenderer.create((0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(TextInput,{ref:textInputRe1,value:"value1"}),(0,_jsxRuntime.jsx)(TextInput,{ref:textInputRe2,value:"value2"})]}));ReactNative.findNodeHandle=jest.fn().mockImplementation(function(ref){if(ref===textInputRe1.current||ref===textInputRe1.current.getNativeRef()){return 1;}if(ref===textInputRe2.current||ref===textInputRe2.current.getNativeRef()){return 2;}return 3;});expect(textInputRe1.current.isFocused()).toBe(false);expect(textInputRe2.current.isFocused()).toBe(false);TextInput.State.focusTextInput(textInputRe1.current);expect(textInputRe1.current.isFocused()).toBe(true);expect(textInputRe2.current.isFocused()).toBe(false);expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe1.current);TextInput.State.focusTextInput(textInputRe2.current);expect(textInputRe1.current.isFocused()).toBe(false);expect(textInputRe2.current.isFocused()).toBe(true);expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe2.current);});it('should render as expected',function(){expectRendersMatchingSnapshot('TextInput',function(){return(0,_jsxRuntime.jsx)(TextInput,{});},function(){jest.dontMock('../TextInput');});});});describe('TextInput',function(){it('default render',function(){var instance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInput,{}));expect(instance.toJSON()).toMatchInlineSnapshot("\n      <RCTSinglelineTextInputView\n        accessible={true}\n        allowFontScaling={true}\n        focusable={true}\n        forwardedRef={null}\n        mostRecentEventCount={0}\n        onBlur={[Function]}\n        onChange={[Function]}\n        onChangeSync={null}\n        onClick={[Function]}\n        onFocus={[Function]}\n        onResponderGrant={[Function]}\n        onResponderMove={[Function]}\n        onResponderRelease={[Function]}\n        onResponderTerminate={[Function]}\n        onResponderTerminationRequest={[Function]}\n        onScroll={[Function]}\n        onSelectionChange={[Function]}\n        onSelectionChangeShouldSetResponder={[Function]}\n        onStartShouldSetResponder={[Function]}\n        rejectResponderTermination={true}\n        selection={null}\n        submitBehavior=\"blurAndSubmit\"\n        text=\"\"\n        underlineColorAndroid=\"transparent\"\n      />\n    ");});it('has displayName',function(){expect(TextInput.displayName).toEqual('TextInput');});});describe('TextInput compat with web',function(){it('renders core props',function(){var props={id:'id',tabIndex:0,testID:'testID'};var instance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInput,Object.assign({},props)));expect(instance.toJSON()).toMatchInlineSnapshot("\n      <RCTSinglelineTextInputView\n        accessible={true}\n        allowFontScaling={true}\n        focusable={true}\n        forwardedRef={null}\n        mostRecentEventCount={0}\n        nativeID=\"id\"\n        onBlur={[Function]}\n        onChange={[Function]}\n        onChangeSync={null}\n        onClick={[Function]}\n        onFocus={[Function]}\n        onResponderGrant={[Function]}\n        onResponderMove={[Function]}\n        onResponderRelease={[Function]}\n        onResponderTerminate={[Function]}\n        onResponderTerminationRequest={[Function]}\n        onScroll={[Function]}\n        onSelectionChange={[Function]}\n        onSelectionChangeShouldSetResponder={[Function]}\n        onStartShouldSetResponder={[Function]}\n        rejectResponderTermination={true}\n        selection={null}\n        submitBehavior=\"blurAndSubmit\"\n        testID=\"testID\"\n        text=\"\"\n        underlineColorAndroid=\"transparent\"\n      />\n    ");});it('renders "aria-*" props',function(){var props={'aria-activedescendant':'activedescendant','aria-atomic':true,'aria-autocomplete':'list','aria-busy':true,'aria-checked':true,'aria-columncount':5,'aria-columnindex':3,'aria-columnspan':2,'aria-controls':'controls','aria-current':'current','aria-describedby':'describedby','aria-details':'details','aria-disabled':true,'aria-errormessage':'errormessage','aria-expanded':true,'aria-flowto':'flowto','aria-haspopup':true,'aria-hidden':true,'aria-invalid':true,'aria-keyshortcuts':'Cmd+S','aria-label':'label','aria-labelledby':'labelledby','aria-level':3,'aria-live':'polite','aria-modal':true,'aria-multiline':true,'aria-multiselectable':true,'aria-orientation':'portrait','aria-owns':'owns','aria-placeholder':'placeholder','aria-posinset':5,'aria-pressed':true,'aria-readonly':true,'aria-required':true,role:'main','aria-roledescription':'roledescription','aria-rowcount':5,'aria-rowindex':3,'aria-rowspan':3,'aria-selected':true,'aria-setsize':5,'aria-sort':'ascending','aria-valuemax':5,'aria-valuemin':0,'aria-valuenow':3,'aria-valuetext':'3'};var instance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInput,Object.assign({},props)));expect(instance.toJSON()).toMatchInlineSnapshot("\n      <RCTSinglelineTextInputView\n        accessibilityState={\n          Object {\n            \"busy\": true,\n            \"checked\": true,\n            \"disabled\": true,\n            \"expanded\": true,\n            \"selected\": true,\n          }\n        }\n        accessible={true}\n        allowFontScaling={true}\n        aria-activedescendant=\"activedescendant\"\n        aria-atomic={true}\n        aria-autocomplete=\"list\"\n        aria-columncount={5}\n        aria-columnindex={3}\n        aria-columnspan={2}\n        aria-controls=\"controls\"\n        aria-current=\"current\"\n        aria-describedby=\"describedby\"\n        aria-details=\"details\"\n        aria-errormessage=\"errormessage\"\n        aria-flowto=\"flowto\"\n        aria-haspopup={true}\n        aria-hidden={true}\n        aria-invalid={true}\n        aria-keyshortcuts=\"Cmd+S\"\n        aria-label=\"label\"\n        aria-labelledby=\"labelledby\"\n        aria-level={3}\n        aria-live=\"polite\"\n        aria-modal={true}\n        aria-multiline={true}\n        aria-multiselectable={true}\n        aria-orientation=\"portrait\"\n        aria-owns=\"owns\"\n        aria-placeholder=\"placeholder\"\n        aria-posinset={5}\n        aria-pressed={true}\n        aria-readonly={true}\n        aria-required={true}\n        aria-roledescription=\"roledescription\"\n        aria-rowcount={5}\n        aria-rowindex={3}\n        aria-rowspan={3}\n        aria-setsize={5}\n        aria-sort=\"ascending\"\n        aria-valuemax={5}\n        aria-valuemin={0}\n        aria-valuenow={3}\n        aria-valuetext=\"3\"\n        focusable={true}\n        forwardedRef={null}\n        mostRecentEventCount={0}\n        onBlur={[Function]}\n        onChange={[Function]}\n        onChangeSync={null}\n        onClick={[Function]}\n        onFocus={[Function]}\n        onResponderGrant={[Function]}\n        onResponderMove={[Function]}\n        onResponderRelease={[Function]}\n        onResponderTerminate={[Function]}\n        onResponderTerminationRequest={[Function]}\n        onScroll={[Function]}\n        onSelectionChange={[Function]}\n        onSelectionChangeShouldSetResponder={[Function]}\n        onStartShouldSetResponder={[Function]}\n        rejectResponderTermination={true}\n        role=\"main\"\n        selection={null}\n        submitBehavior=\"blurAndSubmit\"\n        text=\"\"\n        underlineColorAndroid=\"transparent\"\n      />\n    ");});it('renders styles',function(){var style={display:'flex',flex:1,backgroundColor:'white',marginInlineStart:10,userSelect:'none',verticalAlign:'middle'};var instance=ReactTestRenderer.create((0,_jsxRuntime.jsx)(TextInput,{style:style}));expect(instance.toJSON()).toMatchInlineSnapshot("\n      <RCTSinglelineTextInputView\n        accessible={true}\n        allowFontScaling={true}\n        focusable={true}\n        forwardedRef={null}\n        mostRecentEventCount={0}\n        onBlur={[Function]}\n        onChange={[Function]}\n        onChangeSync={null}\n        onClick={[Function]}\n        onFocus={[Function]}\n        onResponderGrant={[Function]}\n        onResponderMove={[Function]}\n        onResponderRelease={[Function]}\n        onResponderTerminate={[Function]}\n        onResponderTerminationRequest={[Function]}\n        onScroll={[Function]}\n        onSelectionChange={[Function]}\n        onSelectionChangeShouldSetResponder={[Function]}\n        onStartShouldSetResponder={[Function]}\n        rejectResponderTermination={true}\n        selection={null}\n        style={\n          Object {\n            \"backgroundColor\": \"white\",\n            \"display\": \"flex\",\n            \"flex\": 1,\n            \"marginInlineStart\": 10,\n            \"textAlignVertical\": \"center\",\n            \"userSelect\": \"none\",\n          }\n        }\n        submitBehavior=\"blurAndSubmit\"\n        text=\"\"\n        underlineColorAndroid=\"transparent\"\n      />\n    ");});});
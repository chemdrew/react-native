'use strict';var Promise=require('promise');function expectToBeCalledOnce(fn){expect(fn.mock.calls.length).toBe(1);}function clearTaskQueue(taskQueue){do{jest.runAllTimers();taskQueue.processNext();jest.runAllTimers();}while(taskQueue.hasTasksToProcess());}describe('TaskQueue',function(){var taskQueue;var onMoreTasks;var sequenceId;function createSequenceTask(expectedSequenceId){return jest.fn(function(){expect(++sequenceId).toBe(expectedSequenceId);});}beforeEach(function(){jest.resetModules();onMoreTasks=jest.fn();var TaskQueue=require('../TaskQueue');taskQueue=new TaskQueue({onMoreTasks:onMoreTasks});sequenceId=0;});it('should run a basic task',function(){var task1=createSequenceTask(1);taskQueue.enqueue({run:task1,name:'run1'});expect(taskQueue.hasTasksToProcess()).toBe(true);taskQueue.processNext();expectToBeCalledOnce(task1);});it('should handle blocking promise task',function(){var task1=jest.fn(function(){return new Promise(function(resolve){setTimeout(function(){expect(++sequenceId).toBe(1);resolve();},1);});});var task2=createSequenceTask(2);taskQueue.enqueue({gen:task1,name:'gen1'});taskQueue.enqueue({run:task2,name:'run2'});taskQueue.processNext();expectToBeCalledOnce(task1);expect(task2).not.toBeCalled();expect(onMoreTasks).not.toBeCalled();expect(taskQueue.hasTasksToProcess()).toBe(false);clearTaskQueue(taskQueue);expectToBeCalledOnce(onMoreTasks);expectToBeCalledOnce(task2);});it('should handle nested simple tasks',function(){var task1=jest.fn(function(){expect(++sequenceId).toBe(1);taskQueue.enqueue({run:task3,name:'run3'});});var task2=createSequenceTask(2);var task3=createSequenceTask(3);taskQueue.enqueue({run:task1,name:'run1'});taskQueue.enqueue({run:task2,name:'run2'});clearTaskQueue(taskQueue);expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);expectToBeCalledOnce(task3);});it('should handle nested promises',function(){var task1=jest.fn(function(){return new Promise(function(resolve){setTimeout(function(){expect(++sequenceId).toBe(1);taskQueue.enqueue({gen:task2,name:'gen2'});taskQueue.enqueue({run:resolve,name:'resolve1'});},1);});});var task2=jest.fn(function(){return new Promise(function(resolve){setTimeout(function(){expect(++sequenceId).toBe(2);taskQueue.enqueue({run:task3,name:'run3'});taskQueue.enqueue({run:resolve,name:'resolve2'});},1);});});var task3=createSequenceTask(3);var task4=createSequenceTask(4);taskQueue.enqueue({gen:task1,name:'gen1'});taskQueue.enqueue({run:task4,name:'run4'});clearTaskQueue(taskQueue);expectToBeCalledOnce(task1);expectToBeCalledOnce(task2);expectToBeCalledOnce(task3);expectToBeCalledOnce(task4);});it('should be able to cancel tasks',function(){var task1=jest.fn();var task2=createSequenceTask(1);var task3=jest.fn();var task4=createSequenceTask(2);taskQueue.enqueue(task1);taskQueue.enqueue(task2);taskQueue.enqueue(task3);taskQueue.enqueue(task4);taskQueue.cancelTasks([task1,task3]);clearTaskQueue(taskQueue);expect(task1).not.toBeCalled();expect(task3).not.toBeCalled();expectToBeCalledOnce(task2);expectToBeCalledOnce(task4);expect(taskQueue.hasTasksToProcess()).toBe(false);});it('should not crash when last task is cancelled',function(){var task1=jest.fn();taskQueue.enqueue(task1);taskQueue.cancelTasks([task1]);clearTaskQueue(taskQueue);expect(task1).not.toBeCalled();expect(taskQueue.hasTasksToProcess()).toBe(false);});it('should not crash when task is cancelled between being started and resolved',function(){var task1=jest.fn(function(){return new Promise(function(resolve){setTimeout(function(){resolve();},1);});});taskQueue.enqueue({gen:task1,name:'gen1'});taskQueue.processNext();taskQueue.cancelTasks([task1]);jest.runAllTimers();});});
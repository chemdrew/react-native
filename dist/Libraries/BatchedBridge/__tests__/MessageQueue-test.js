'use strict';var MessageQueue;var MessageQueueTestModule;var queue;var MODULE_IDS=0;var METHOD_IDS=1;var PARAMS=2;var assertQueue=function assertQueue(flushedQueue,index,moduleID,methodID,params){expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);expect(flushedQueue[PARAMS][index]).toEqual(params);};describe('MessageQueue',function(){beforeEach(function(){jest.resetModules();MessageQueue=require('../MessageQueue');MessageQueueTestModule=require('../__mocks__/MessageQueueTestModule');queue=new MessageQueue();queue.registerCallableModule('MessageQueueTestModule',MessageQueueTestModule);queue.createDebugLookup(0,'MessageQueueTestModule',['testHook1','testHook2']);});it('should enqueue native calls',function(){queue.enqueueNativeCall(0,1,[2]);var flushedQueue=queue.flushedQueue();assertQueue(flushedQueue,0,0,1,[2]);});it('should call a local function with the function name',function(){MessageQueueTestModule.testHook2=jest.fn();expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(0);queue.__callFunction('MessageQueueTestModule','testHook2',[2]);expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(1);});it('should store callbacks',function(){queue.enqueueNativeCall(0,1,['foo'],null,null);var flushedQueue=queue.flushedQueue();assertQueue(flushedQueue,0,0,1,['foo']);});it('should call the stored callback',function(){var done=false;queue.enqueueNativeCall(0,1,[],function(){},function(){done=true;});queue.__invokeCallback(1,[]);expect(done).toEqual(true);});it('should throw when calling the same callback twice',function(){queue.enqueueNativeCall(0,1,[],function(){},function(){});queue.__invokeCallback(1,[]);expect(function(){return queue.__invokeCallback(1,[]);}).toThrow();});it('should throw when calling both success and failure callback',function(){queue.enqueueNativeCall(0,1,[],function(){},function(){});queue.__invokeCallback(1,[]);expect(function(){return queue.__invokeCallback(0,[]);}).toThrow();});it('should throw when calling with unknown module',function(){var unknownModule='UnknownModule',unknownMethod='UnknownMethod';expect(function(){return queue.__callFunction(unknownModule,unknownMethod);}).toThrow("Failed to call into JavaScript module method "+unknownModule+"."+unknownMethod+"(). Module has not been registered as callable. Bridgeless Mode: false. Registered callable JavaScript modules (n = 1): MessageQueueTestModule.\n        A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.");});it('should return lazily registered module',function(){var dummyModule={},name='modulesName';queue.registerLazyCallableModule(name,function(){return dummyModule;});expect(queue.getCallableModule(name)).toEqual(dummyModule);});it('should not initialize lazily registered module before it was used for the first time',function(){var dummyModule={},name='modulesName';var factory=jest.fn(function(){return dummyModule;});queue.registerLazyCallableModule(name,factory);expect(factory).not.toHaveBeenCalled();});it('should initialize lazily registered module only once',function(){var dummyModule={},name='modulesName';var factory=jest.fn(function(){return dummyModule;});queue.registerLazyCallableModule(name,factory);queue.getCallableModule(name);queue.getCallableModule(name);expect(factory).toHaveBeenCalledTimes(1);});it('should check if the global error handler is not overridden by the DebuggerInternal object',function(){var dummyModule={dummy:function dummy(){}};var name='emptyModuleName';var factory=jest.fn(function(){return dummyModule;});queue.__shouldPauseOnThrow=jest.fn(function(){return false;});queue.registerLazyCallableModule(name,factory);queue.callFunctionReturnFlushedQueue(name,'dummy',[]);expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);});it('should check if the global error handler is overridden by the DebuggerInternal object',function(){var dummyModule={dummy:function dummy(){}};var name='emptyModuleName';var factory=jest.fn(function(){return dummyModule;});queue.__shouldPauseOnThrow=jest.fn(function(){return true;});queue.registerLazyCallableModule(name,factory);queue.callFunctionReturnFlushedQueue(name,'dummy',[]);expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);});});
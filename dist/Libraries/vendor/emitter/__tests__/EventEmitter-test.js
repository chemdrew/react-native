var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _EventEmitter=_interopRequireDefault(require("../EventEmitter"));describe('listeners',function(){it('does nothing without listeners',function(){var emitter=new _EventEmitter.default();expect(function(){emitter.emit('A');}).not.toThrow();});it('invokes multiple listeners',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.emit('A');expect(listenerA).toHaveBeenCalledTimes(1);expect(listenerB).toHaveBeenCalledTimes(1);emitter.emit('A');expect(listenerA).toHaveBeenCalledTimes(2);expect(listenerB).toHaveBeenCalledTimes(2);});it('invokes listeners of a type',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('B',listenerB);emitter.emit('A');expect(listenerA).toHaveBeenCalledTimes(1);expect(listenerB).toHaveBeenCalledTimes(0);emitter.emit('B');expect(listenerA).toHaveBeenCalledTimes(1);expect(listenerB).toHaveBeenCalledTimes(1);});it('invokes listeners in registration order',function(){var emitter=new _EventEmitter.default();var results=[];var listenerA=jest.fn(function(){results.push('A');});var listenerB=jest.fn(function(){results.push('B');});var listenerC=jest.fn(function(){results.push('C');});emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.addListener('A',listenerC);emitter.emit('A');expect(results).toEqual(['A','B','C']);});it('invokes the same listener registered multiple times',function(){var emitter=new _EventEmitter.default();var listener=jest.fn();var subscriptionA=emitter.addListener('A',listener);var subscriptionB=emitter.addListener('A',listener);emitter.emit('A');expect(listener).toHaveBeenCalledTimes(2);subscriptionA.remove();emitter.emit('A');expect(listener).toHaveBeenCalledTimes(3);subscriptionB.remove();emitter.emit('A');expect(listener).toHaveBeenCalledTimes(3);});});describe('arguments and context',function(){it('invokes listeners with emit() arguments',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.emit('A',123,'abc');expect(listenerA).toHaveBeenCalledWith(123,'abc');expect(listenerB).toHaveBeenCalledWith(123,'abc');emitter.emit('A',456,'def');expect(listenerA).toHaveBeenCalledWith(456,'def');expect(listenerB).toHaveBeenCalledWith(456,'def');});it('invokes listeners with specified context',function(){var emitter=new _EventEmitter.default();var context={};var result;var listener=jest.fn(function(){result=this;});emitter.addListener('A',listener,context);emitter.emit('A');expect(listener).toHaveBeenCalled();expect(result).toBe(context);});});describe('removing subscriptions',function(){it('does not invoked removed listeners',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();var subscriptionA=emitter.addListener('A',listenerA);var subscriptionB=emitter.addListener('A',listenerB);subscriptionA.remove();emitter.emit('A');expect(listenerA).toHaveBeenCalledTimes(0);expect(listenerB).toHaveBeenCalledTimes(1);subscriptionB.remove();emitter.emit('A');expect(listenerA).toHaveBeenCalledTimes(0);expect(listenerB).toHaveBeenCalledTimes(1);});it('does nothing when removing a subscription more than once',function(){var emitter=new _EventEmitter.default();var listener=jest.fn();var subscription=emitter.addListener('A',listener);subscription.remove();expect(function(){subscription.remove();}).not.toThrow();});it('removes all listeners',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('B',listenerB);emitter.removeAllListeners();emitter.emit('A');expect(listenerA).not.toHaveBeenCalled();emitter.emit('B');expect(listenerB).not.toHaveBeenCalled();});it('removes all listeners of a type',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('B',listenerB);emitter.removeAllListeners('A');emitter.emit('A');expect(listenerA).not.toHaveBeenCalled();emitter.emit('B');expect(listenerB).toHaveBeenCalled();});});describe('listener count',function(){it('counts the number of listeners for an event type',function(){var emitter=new _EventEmitter.default();expect(emitter.listenerCount('A')).toBe(0);expect(emitter.listenerCount('B')).toBe(0);var listenerA=jest.fn();var listenerB=jest.fn();var listenerC=jest.fn();var subscriptionA=emitter.addListener('A',listenerA);var subscriptionB=emitter.addListener('A',listenerB);var subscriptionC=emitter.addListener('B',listenerC);expect(emitter.listenerCount('A')).toBe(2);expect(emitter.listenerCount('B')).toBe(1);subscriptionA.remove();expect(emitter.listenerCount('A')).toBe(1);expect(emitter.listenerCount('B')).toBe(1);subscriptionB.remove();subscriptionC.remove();expect(emitter.listenerCount('A')).toBe(0);expect(emitter.listenerCount('B')).toBe(0);subscriptionA.remove();expect(emitter.listenerCount('A')).toBe(0);});});describe('event emission',function(){it('interrupts emission when a listener throws an error',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn(function(){throw new Error('Expected error.');});var listenerC=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.addListener('A',listenerC);expect(function(){emitter.emit('A');}).toThrow('Expected error.');expect(listenerA).toHaveBeenCalledTimes(1);expect(listenerB).toHaveBeenCalledTimes(1);expect(listenerC).toHaveBeenCalledTimes(0);});it('does not invoke listeners added during emission',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn(function(){emitter.addListener('A',listenerB);});var listenerB=jest.fn();emitter.addListener('A',listenerA);emitter.emit('A');expect(listenerA).toHaveBeenCalled();expect(listenerB).not.toHaveBeenCalled();});it('invokes pending listeners if previous subscriptions are removed',function(){var emitter=new _EventEmitter.default();var results=[];var listenerA=jest.fn(function(){results.push('A');});var listenerB=jest.fn(function(){results.push('B');subscriptionA.remove();});var listenerC=jest.fn(function(){results.push('C');});var subscriptionA=emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.addListener('A',listenerC);emitter.emit('A');expect(results).toEqual(['A','B','C']);emitter.emit('A');expect(results).toEqual(['A','B','C','B','C']);});it('invokes pending listeners if current subscription is removed',function(){var emitter=new _EventEmitter.default();var results=[];var listenerA=jest.fn(function(){results.push('A');});var listenerB=jest.fn(function(){results.push('B');subscriptionB.remove();});var listenerC=jest.fn(function(){results.push('C');});emitter.addListener('A',listenerA);var subscriptionB=emitter.addListener('A',listenerB);emitter.addListener('A',listenerC);emitter.emit('A');expect(results).toEqual(['A','B','C']);emitter.emit('A');expect(results).toEqual(['A','B','C','A','C']);});it('invokes pending listeners even if its subscription is removed',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn(function(){subscriptionC.remove();});var listenerC=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);var subscriptionC=emitter.addListener('A',listenerC);emitter.emit('A');expect(listenerA).toHaveBeenCalled();expect(listenerB).toHaveBeenCalled();expect(listenerC).toHaveBeenCalled();});it('invokes pending listeners even if all listeners are removed',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn();var listenerB=jest.fn(function(){emitter.removeAllListeners();});var listenerC=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.addListener('A',listenerC);emitter.emit('A');expect(listenerA).toHaveBeenCalled();expect(listenerB).toHaveBeenCalled();expect(listenerC).toHaveBeenCalled();});it('invokes pending listeners if all listeners of a type are removed',function(){var emitter=new _EventEmitter.default();var listenerA=jest.fn(function(){emitter.removeAllListeners('A');});var listenerB=jest.fn();var listenerC=jest.fn();emitter.addListener('A',listenerA);emitter.addListener('A',listenerB);emitter.addListener('B',listenerC);emitter.emit('A');expect(listenerA).toHaveBeenCalled();expect(listenerB).toHaveBeenCalled();emitter.emit('B');expect(listenerC).toHaveBeenCalled();});});
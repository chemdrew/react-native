var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _TouchableWithoutFeedback=_interopRequireDefault(require("../../Components/Touchable/TouchableWithoutFeedback"));var _View=_interopRequireDefault(require("../../Components/View/View"));var _StyleSheet=_interopRequireDefault(require("../../StyleSheet/StyleSheet"));var LogBoxStyle=_interopRequireWildcard(require("./LogBoxStyle"));var React=_interopRequireWildcard(require("react"));var _jsxRuntime=require("react/jsx-runtime");var _jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/LogBox/UI/LogBoxButton.js";function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function LogBoxButton(props){var _React$useState=React.useState(false),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),pressed=_React$useState2[0],setPressed=_React$useState2[1];var backgroundColor=props.backgroundColor;if(!backgroundColor){backgroundColor={default:LogBoxStyle.getBackgroundColor(0.95),pressed:LogBoxStyle.getBackgroundColor(0.6)};}var content=(0,_jsxRuntime.jsx)(_View.default,{style:_StyleSheet.default.compose({backgroundColor:pressed?backgroundColor.pressed:backgroundColor.default},props.style),children:props.children});return props.onPress==null?content:(0,_jsxRuntime.jsx)(_TouchableWithoutFeedback.default,{hitSlop:props.hitSlop,onPress:props.onPress,onPressIn:function onPressIn(){return setPressed(true);},onPressOut:function onPressOut(){return setPressed(false);},children:content});}var _default=LogBoxButton;exports.default=_default;
'use strict';var UIManager=require('../../ReactNative/UIManager');var codegenNativeComponent=require('../codegenNativeComponent').default;jest.unmock('../../ReactNative/requireNativeComponent');jest.mock('../../Renderer/shims/createReactNativeComponentClass',function(){return function(componentName){return componentName;};});jest.spyOn(UIManager,'hasViewManagerConfig').mockImplementation(function(componentName){return componentName.includes('ComponentNameDoesNotExist')?false:true;});describe('codegenNativeComponent',function(){it('should require component as is ',function(){var component=codegenNativeComponent('ComponentName');expect(component).toBe('ComponentName');});it('should require paperComponentName',function(){var component=codegenNativeComponent('ComponentName',{paperComponentName:'PaperComponentName'});expect(component).toBe('PaperComponentName');});it('should fall back to requiring the deprecated paper component name',function(){var component=codegenNativeComponent('ComponentNameDoesNotExist',{paperComponentNameDeprecated:'ComponentName'});expect(component).toBe('ComponentName');});it('should require the new component name',function(){var component=codegenNativeComponent('ComponentName',{paperComponentNameDeprecated:'ComponentNameDoesNotExist'});expect(component).toBe('ComponentName');});it('should throw if neither component names exist',function(){expect(function(){return codegenNativeComponent('ComponentNameDoesNotExistOne',{paperComponentNameDeprecated:'ComponentNameDoesNotExistTwo'});}).toThrow('Failed to find native component for either ComponentNameDoesNotExistOne or ComponentNameDoesNotExistTwo');});});
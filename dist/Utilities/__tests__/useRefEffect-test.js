var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _View=_interopRequireDefault(require("../../Components/View/View"));var _useRefEffect=_interopRequireDefault(require("../useRefEffect"));var React=_interopRequireWildcard(require("react"));var _reactTestRenderer=require("react-test-renderer");var _jsxRuntime=require("react/jsx-runtime");var _jsxFileName="/Users/apratt/dev/tmp/react-native/Libraries/Utilities/__tests__/useRefEffect-test.js",_this=this;function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function TestView(_ref){var _ref$childKey=_ref.childKey,childKey=_ref$childKey===void 0?null:_ref$childKey,effect=_ref.effect;var ref=(0,_useRefEffect.default)(effect);return(0,_jsxRuntime.jsx)(_View.default,{ref:ref,testID:childKey},childKey);}var TestEffect=function(){function TestEffect(name,key){(0,_classCallCheck2.default)(this,TestEffect);this.name=name;this.key=key;}(0,_createClass2.default)(TestEffect,null,[{key:"called",value:function called(name,key){return expect.effect(name,key);}}]);return TestEffect;}();var TestEffectCleanup=function(){function TestEffectCleanup(name,key){(0,_classCallCheck2.default)(this,TestEffectCleanup);this.name=name;this.key=key;}(0,_createClass2.default)(TestEffectCleanup,null,[{key:"called",value:function called(name,key){return expect.effectCleanup(name,key);}}]);return TestEffectCleanup;}();expect.extend({effect:function effect(received,name,key){var pass=received instanceof TestEffect&&received.name===name&&received.key===key;return{pass:pass};},effectCleanup:function effectCleanup(received,name,key){var pass=received instanceof TestEffectCleanup&&received.name===name&&received.key===key;return{pass:pass};}});function mockEffectRegistry(){var registry=[];return{mockEffect:function mockEffect(name){return function(instance){var _instance$props;var key=instance==null?void 0:(_instance$props=instance.props)==null?void 0:_instance$props.testID;registry.push(new TestEffect(name,key));return function(){registry.push(new TestEffectCleanup(name,key));};};},mockEffectWithoutCleanup:function mockEffectWithoutCleanup(name){return function(instance){var _instance$props2;var key=instance==null?void 0:(_instance$props2=instance.props)==null?void 0:_instance$props2.testID;registry.push(new TestEffect(name,key));};},registry:registry};}test('calls effect without cleanup',function(){var root;var _mockEffectRegistry=mockEffectRegistry(),mockEffectWithoutCleanup=_mockEffectRegistry.mockEffectWithoutCleanup,registry=_mockEffectRegistry.registry;var effectA=mockEffectWithoutCleanup('A');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectA}));});expect(registry).toEqual([TestEffect.called('A','foo')]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([TestEffect.called('A','foo')]);});test('calls effect and cleanup',function(){var root;var _mockEffectRegistry2=mockEffectRegistry(),mockEffect=_mockEffectRegistry2.mockEffect,registry=_mockEffectRegistry2.registry;var effectA=mockEffect('A');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectA}));});expect(registry).toEqual([TestEffect.called('A','foo')]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo')]);});test('cleans up old effect before calling new effect',function(){var root;var _mockEffectRegistry3=mockEffectRegistry(),mockEffect=_mockEffectRegistry3.mockEffect,registry=_mockEffectRegistry3.registry;var effectA=mockEffect('A');var effectB=mockEffect('B');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectA}));});(0,_reactTestRenderer.act)(function(){root.update((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectB}));});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('B','foo')]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('B','foo'),TestEffectCleanup.called('B','foo')]);});test('calls cleanup and effect on new instance',function(){var root;var _mockEffectRegistry4=mockEffectRegistry(),mockEffect=_mockEffectRegistry4.mockEffect,registry=_mockEffectRegistry4.registry;var effectA=mockEffect('A');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectA}));});(0,_reactTestRenderer.act)(function(){root.update((0,_jsxRuntime.jsx)(TestView,{childKey:"bar",effect:effectA}));});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('A','bar')]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('A','bar'),TestEffectCleanup.called('A','bar')]);});test('cleans up old effect before calling new effect with new instance',function(){var root;var _mockEffectRegistry5=mockEffectRegistry(),mockEffect=_mockEffectRegistry5.mockEffect,registry=_mockEffectRegistry5.registry;var effectA=mockEffect('A');var effectB=mockEffect('B');(0,_reactTestRenderer.act)(function(){root=(0,_reactTestRenderer.create)((0,_jsxRuntime.jsx)(TestView,{childKey:"foo",effect:effectA}));});(0,_reactTestRenderer.act)(function(){root.update((0,_jsxRuntime.jsx)(TestView,{childKey:"bar",effect:effectB}));});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('B','bar')]);(0,_reactTestRenderer.act)(function(){root.unmount();});expect(registry).toEqual([TestEffect.called('A','foo'),TestEffectCleanup.called('A','foo'),TestEffect.called('B','bar'),TestEffectCleanup.called('B','bar')]);});
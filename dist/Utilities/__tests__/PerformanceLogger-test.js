var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _createPerformanceLogger=_interopRequireDefault(require("../createPerformanceLogger"));var _GlobalPerformanceLogger=_interopRequireDefault(require("../GlobalPerformanceLogger"));var TIMESPAN_1='<timespan_1>';var EXTRA_KEY='<extra_key>';var EXTRA_VALUE='<extra_value>';var EXTRA_VALUE_2='<extra_value_2>';var POINT='<point>';var POINT_TIMESTAMP=99;var POINT_TIMESTAMP_2=999;var POINT_ANNOTATION_1={extra:'value1'};var POINT_ANNOTATION_2={extra:'value2'};describe('PerformanceLogger',function(){beforeEach(function(){_GlobalPerformanceLogger.default.clear();});describe('close() ',function(){var perfLogger;beforeEach(function(){perfLogger=(0,_createPerformanceLogger.default)();});it('does not markPoint',function(){perfLogger.close();perfLogger.markPoint(POINT,POINT_TIMESTAMP);expect(perfLogger.getPoints()).toEqual({});});it('does not startTimespan',function(){perfLogger.close();perfLogger.startTimespan(TIMESPAN_1);expect(perfLogger.getTimespans()).toEqual({});});it('does not setExtra',function(){perfLogger.close();perfLogger.setExtra('extra','an extra value');expect(perfLogger.getTimespans()).toEqual({});});it('does not stopTimespan',function(){var _timespan,_timespan2,_timespan3,_timespan4;perfLogger.startTimespan(TIMESPAN_1);perfLogger.close();var timespan=perfLogger.getTimespans()[TIMESPAN_1];expect((_timespan=timespan)==null?void 0:_timespan.endTime).toBeUndefined();expect((_timespan2=timespan)==null?void 0:_timespan2.totalTime).toBeUndefined();perfLogger.stopTimespan(TIMESPAN_1);timespan=perfLogger.getTimespans()[TIMESPAN_1];expect((_timespan3=timespan)==null?void 0:_timespan3.endTime).toBeUndefined();expect((_timespan4=timespan)==null?void 0:_timespan4.totalTime).toBeUndefined();});});it('starts & stops a timespan',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.startTimespan(TIMESPAN_1);perfLogger.stopTimespan(TIMESPAN_1);expect(perfLogger.hasTimespan(TIMESPAN_1)).toBe(true);expect(perfLogger.getTimespans()[TIMESPAN_1]).toEqual({startTime:expect.any(Number),endTime:expect.any(Number),totalTime:expect.any(Number)});});it('starts & stops a timespan with custom timestamps',function(){var perfLogger=(0,_createPerformanceLogger.default)();var startTime=25;var endTime=35;perfLogger.startTimespan(TIMESPAN_1,startTime);perfLogger.stopTimespan(TIMESPAN_1,endTime);expect(perfLogger.hasTimespan(TIMESPAN_1)).toBe(true);expect(perfLogger.getTimespans()[TIMESPAN_1]).toEqual({startTime:startTime,endTime:endTime,totalTime:expect.any(Number)});});it('does not override a timespan',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.startTimespan(TIMESPAN_1);var old=perfLogger.getTimespans()[TIMESPAN_1];perfLogger.startTimespan(TIMESPAN_1);expect(perfLogger.getTimespans()[TIMESPAN_1]).toBe(old);});it('adds a timespan with start and end timestamps',function(){var perfLogger=(0,_createPerformanceLogger.default)();var startTime=0;var endTime=100;perfLogger.addTimespan(TIMESPAN_1,startTime,endTime);expect(perfLogger.getTimespans()[TIMESPAN_1]).toEqual({startTime:startTime,endTime:endTime,totalTime:endTime-startTime});});it('adds a timespan with same key will not override existing',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.startTimespan(TIMESPAN_1);perfLogger.stopTimespan(TIMESPAN_1);var existing=perfLogger.getTimespans()[TIMESPAN_1];perfLogger.addTimespan(TIMESPAN_1,0,100);expect(perfLogger.getTimespans()[TIMESPAN_1]).toEqual(existing);});it('logs an extra',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.setExtra(EXTRA_KEY,EXTRA_VALUE);expect(perfLogger.getExtras()).toEqual((0,_defineProperty2.default)({},EXTRA_KEY,EXTRA_VALUE));});it('does not override a extra',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.setExtra(EXTRA_KEY,EXTRA_VALUE);expect(perfLogger.getExtras()).toEqual((0,_defineProperty2.default)({},EXTRA_KEY,EXTRA_VALUE));perfLogger.setExtra(EXTRA_KEY,EXTRA_VALUE_2);expect(perfLogger.getExtras()).toEqual((0,_defineProperty2.default)({},EXTRA_KEY,EXTRA_VALUE));});it('removes an extra',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.setExtra(EXTRA_KEY,EXTRA_VALUE);expect(perfLogger.getExtras()).toEqual((0,_defineProperty2.default)({},EXTRA_KEY,EXTRA_VALUE));expect(perfLogger.removeExtra(EXTRA_KEY)).toEqual(EXTRA_VALUE);expect(perfLogger.getExtras()).toEqual({});});it('logs a point',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.markPoint(POINT,POINT_TIMESTAMP);expect(perfLogger.getPoints()).toEqual((0,_defineProperty2.default)({},POINT,POINT_TIMESTAMP));});it('does not override a point',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.markPoint(POINT,POINT_TIMESTAMP);expect(perfLogger.getPoints()).toEqual((0,_defineProperty2.default)({},POINT,POINT_TIMESTAMP));perfLogger.markPoint(POINT,POINT_TIMESTAMP_2);expect(perfLogger.getPoints()).toEqual((0,_defineProperty2.default)({},POINT,POINT_TIMESTAMP));});it('global and local loggers do not conflict',function(){var checkLogger=function checkLogger(logger,shouldBeEmpty){expect(Object.keys(logger.getTimespans())).toEqual(shouldBeEmpty?[]:[TIMESPAN_1]);expect(logger.getExtras()).toEqual(shouldBeEmpty?{}:(0,_defineProperty2.default)({},EXTRA_KEY,EXTRA_VALUE));expect(Object.keys(logger.getPoints())).toEqual(shouldBeEmpty?[]:[POINT]);};var localPerformanceLogger1=(0,_createPerformanceLogger.default)();var localPerformanceLogger2=(0,_createPerformanceLogger.default)();localPerformanceLogger1.startTimespan(TIMESPAN_1);localPerformanceLogger1.stopTimespan(TIMESPAN_1);localPerformanceLogger1.setExtra(EXTRA_KEY,EXTRA_VALUE);localPerformanceLogger1.markPoint(POINT);checkLogger(localPerformanceLogger1,false);checkLogger(localPerformanceLogger2,true);checkLogger(_GlobalPerformanceLogger.default,true);localPerformanceLogger2.startTimespan(TIMESPAN_1);localPerformanceLogger2.stopTimespan(TIMESPAN_1);localPerformanceLogger2.setExtra(EXTRA_KEY,EXTRA_VALUE);localPerformanceLogger2.markPoint(POINT,undefined);checkLogger(localPerformanceLogger2,false);checkLogger(_GlobalPerformanceLogger.default,true);_GlobalPerformanceLogger.default.startTimespan(TIMESPAN_1);_GlobalPerformanceLogger.default.stopTimespan(TIMESPAN_1);_GlobalPerformanceLogger.default.setExtra(EXTRA_KEY,EXTRA_VALUE);_GlobalPerformanceLogger.default.markPoint(POINT);checkLogger(_GlobalPerformanceLogger.default,false);localPerformanceLogger1.clear();checkLogger(localPerformanceLogger1,true);checkLogger(localPerformanceLogger2,false);checkLogger(_GlobalPerformanceLogger.default,false);_GlobalPerformanceLogger.default.clear();checkLogger(localPerformanceLogger1,true);checkLogger(localPerformanceLogger2,false);checkLogger(_GlobalPerformanceLogger.default,true);localPerformanceLogger2.clear();checkLogger(localPerformanceLogger1,true);checkLogger(localPerformanceLogger2,true);checkLogger(_GlobalPerformanceLogger.default,true);});it('records extras for a timespan',function(){var _perfLogger$getTimesp,_perfLogger$getTimesp2;var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.startTimespan(TIMESPAN_1,undefined,POINT_ANNOTATION_1);perfLogger.stopTimespan(TIMESPAN_1,undefined,POINT_ANNOTATION_2);expect((_perfLogger$getTimesp=perfLogger.getTimespans()[TIMESPAN_1])==null?void 0:_perfLogger$getTimesp.startExtras).toEqual(POINT_ANNOTATION_1);expect((_perfLogger$getTimesp2=perfLogger.getTimespans()[TIMESPAN_1])==null?void 0:_perfLogger$getTimesp2.endExtras).toEqual(POINT_ANNOTATION_2);});it('records extras for a point',function(){var perfLogger=(0,_createPerformanceLogger.default)();perfLogger.markPoint(POINT,POINT_TIMESTAMP,POINT_ANNOTATION_1);expect(Object.keys(perfLogger.getPointExtras())).toEqual([POINT]);expect(perfLogger.getPointExtras()[POINT]).toEqual(POINT_ANNOTATION_1);});it('should allow extended logger to stopTimespan',function(){var loggerA=(0,_createPerformanceLogger.default)();loggerA.startTimespan('loggerA_timespan');var loggerB=(0,_createPerformanceLogger.default)();loggerB.append(loggerA);loggerB.stopTimespan('loggerA_timespan');var timespan=loggerB.getTimespans().loggerA_timespan;expect(timespan==null?void 0:timespan.startTime).not.toBeUndefined();expect(timespan==null?void 0:timespan.endTime).not.toBeUndefined();expect(timespan==null?void 0:timespan.totalTime).not.toBeUndefined();expect(loggerA.isClosed()).toBe(false);});it('should append logger',function(){var loggerA=(0,_createPerformanceLogger.default)();loggerA.addTimespan('loggerA_timespan1',0,10);loggerA.addTimespan('loggerA_timespan2',2,8,{loggerA_timespan2_start:100},{loggerA_timespan2_end:200});loggerA.markPoint('loggerA_point',5,{loggerA_pointExtra:true});loggerA.setExtra('loggerA_extra',true);var loggerB=(0,_createPerformanceLogger.default)();loggerB.append(loggerA);loggerB.addTimespan('loggerB_timespan',0,10);loggerB.markPoint('loggerB_point',3);expect(loggerA.isClosed()).toBe(false);expect(loggerB.getTimespans()).toEqual({loggerA_timespan1:{endExtras:undefined,endTime:10,startExtras:undefined,startTime:0,totalTime:10},loggerA_timespan2:{endExtras:{loggerA_timespan2_end:200},endTime:8,startExtras:{loggerA_timespan2_start:100},startTime:2,totalTime:6},loggerB_timespan:{endExtras:undefined,endTime:10,startExtras:undefined,startTime:0,totalTime:10}});expect(loggerB.getPoints()).toEqual({loggerA_point:5,loggerB_point:3});expect(loggerB.getPointExtras()).toEqual({loggerA_point:{loggerA_pointExtra:true}});expect(loggerB.getExtras()).toEqual({loggerA_extra:true});});});